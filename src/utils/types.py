"""Common type definitions for the Guardian Angel system."""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import List, Tuple, Optional, Dict, Any
import numpy as np


class AlertType(Enum):
    """Types of alerts that can be generated."""
    FALL_DETECTED = "fall_detected"
    FIGHT_DETECTED = "fight_detected"
    BULLYING_SUSPECTED = "bullying_suspected"
    POSH_VIOLATION = "posh_violation"
    ISOLATED_AREA_CONCERN = "isolated_area_concern"
    AGGRESSIVE_GESTURE = "aggressive_gesture"
    GROUP_CORNERING = "group_cornering"


class AlertSeverity(Enum):
    """Severity levels for alerts."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class BoundingBox:
    """Bounding box coordinates."""
    x1: float
    y1: float
    x2: float
    y2: float
    confidence: float = 1.0

    @property
    def center(self) -> Tuple[float, float]:
        """Get center point of bounding box."""
        return ((self.x1 + self.x2) / 2, (self.y1 + self.y2) / 2)

    @property
    def area(self) -> float:
        """Get area of bounding box."""
        return (self.x2 - self.x1) * (self.y2 - self.y1)

    @property
    def width(self) -> float:
        """Get width of bounding box."""
        return self.x2 - self.x1

    @property
    def height(self) -> float:
        """Get height of bounding box."""
        return self.y2 - self.y1


@dataclass
class Pose:
    """Pose keypoints and associated metadata."""
    keypoints: np.ndarray  # Shape: (N, 3) where N is number of keypoints, (x, y, confidence)
    bbox: BoundingBox
    person_id: Optional[int] = None

    def get_keypoint(self, index: int) -> Optional[Tuple[float, float, float]]:
        """Get specific keypoint (x, y, confidence)."""
        if 0 <= index < len(self.keypoints):
            return tuple(self.keypoints[index])
        return None


@dataclass
class Detection:
    """Object detection result."""
    bbox: BoundingBox
    class_id: int
    class_name: str
    confidence: float
    track_id: Optional[int] = None
    pose: Optional[Pose] = None
    features: Dict[str, Any] = field(default_factory=dict)


@dataclass
class Alert:
    """Alert generated by a detector."""
    alert_id: str
    alert_type: AlertType
    severity: AlertSeverity
    timestamp: datetime
    camera_id: str
    confidence: float
    description: str
    bounding_boxes: List[BoundingBox] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    frame_snapshot: Optional[np.ndarray] = None
    video_clip_path: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert alert to dictionary for serialization."""
        return {
            "alert_id": self.alert_id,
            "alert_type": self.alert_type.value,
            "severity": self.severity.value,
            "timestamp": self.timestamp.isoformat(),
            "camera_id": self.camera_id,
            "confidence": self.confidence,
            "description": self.description,
            "metadata": self.metadata,
            "video_clip_path": self.video_clip_path,
        }


@dataclass
class Frame:
    """Video frame with metadata."""
    image: np.ndarray
    timestamp: datetime
    frame_number: int
    camera_id: str
    detections: List[Detection] = field(default_factory=list)
